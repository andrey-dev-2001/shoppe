/* tslint:disable */
/* eslint-disable */
/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Banner
 */
export interface Banner {
    /**
     * 
     * @type {number}
     * @memberof Banner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'link'?: string | null;
}
/**
 * 
 * @export
 * @interface ContactUs
 */
export interface ContactUs {
    /**
     * 
     * @type {number}
     * @memberof ContactUs
     */
    'contactId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactUs
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUs
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUs
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUs
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ContactUs
     */
    'subjectId'?: number;
}
/**
 * 
 * @export
 * @interface ContactUsCreate
 */
export interface ContactUsCreate {
    /**
     * 
     * @type {string}
     * @memberof ContactUsCreate
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsCreate
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUsCreate
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ContactUsCreate
     */
    'subjectId': number;
}
/**
 * 
 * @export
 * @interface ContactUsGet
 */
export interface ContactUsGet {
    /**
     * 
     * @type {number}
     * @memberof ContactUsGet
     */
    'contactId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactUsGet
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUsGet
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUsGet
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUsGet
     */
    'message'?: string | null;
    /**
     * 
     * @type {Subject}
     * @memberof ContactUsGet
     */
    'subject'?: Subject;
}
/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterModel
 */
export interface RegisterModel {
    /**
     * 
     * @type {string}
     * @memberof RegisterModel
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterModel
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterModel
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterModel
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface SocialMediaLink
 */
export interface SocialMediaLink {
    /**
     * 
     * @type {number}
     * @memberof SocialMediaLink
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SocialMediaLink
     */
    'platform'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SocialMediaLink
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SocialMediaLink
     */
    'iconUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {number}
     * @memberof Subject
     */
    'subjectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'subjectName'?: string | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [lang] 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (lang?: string, loginModel?: LoginModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenRequest} [refreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost: async (refreshTokenRequest?: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterModel} [registerModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (registerModel?: RegisterModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [lang] 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(lang?: string, loginModel?: LoginModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(lang, loginModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshTokenRequest} [refreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshPost(refreshTokenRequest?: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshPost(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterModel} [registerModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(registerModel?: RegisterModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(registerModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(requestParameters: AuthApiAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authLoginPost(requestParameters.lang, requestParameters.loginModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthRefreshPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshPost(requestParameters: AuthApiAuthRefreshPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authRefreshPost(requestParameters.refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(requestParameters: AuthApiAuthRegisterPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authRegisterPost(requestParameters.registerModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginPostRequest
 */
export interface AuthApiAuthLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthLoginPost
     */
    readonly lang?: string

    /**
     * 
     * @type {LoginModel}
     * @memberof AuthApiAuthLoginPost
     */
    readonly loginModel?: LoginModel
}

/**
 * Request parameters for authRefreshPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthRefreshPostRequest
 */
export interface AuthApiAuthRefreshPostRequest {
    /**
     * 
     * @type {RefreshTokenRequest}
     * @memberof AuthApiAuthRefreshPost
     */
    readonly refreshTokenRequest?: RefreshTokenRequest
}

/**
 * Request parameters for authRegisterPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthRegisterPostRequest
 */
export interface AuthApiAuthRegisterPostRequest {
    /**
     * 
     * @type {RegisterModel}
     * @memberof AuthApiAuthRegisterPost
     */
    readonly registerModel?: RegisterModel
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(requestParameters: AuthApiAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(requestParameters.lang, requestParameters.loginModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefreshPost(requestParameters: AuthApiAuthRefreshPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefreshPost(requestParameters.refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterPost(requestParameters: AuthApiAuthRegisterPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterPost(requestParameters.registerModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactUsApi - axios parameter creator
 * @export
 */
export const ContactUsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/contactUs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiContactUsIdDelete', 'id', id)
            const localVarPath = `/api/contactUs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiContactUsIdGet', 'id', id)
            const localVarPath = `/api/contactUs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ContactUsCreate} [contactUsCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsIdPut: async (id: number, contactUsCreate?: ContactUsCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiContactUsIdPut', 'id', id)
            const localVarPath = `/api/contactUs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactUsCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ContactUsCreate} [contactUsCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsPost: async (contactUsCreate?: ContactUsCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/contactUs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactUsCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactUsApi - functional programming interface
 * @export
 */
export const ContactUsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactUsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContactUsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContactUsGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContactUsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactUsApi.apiContactUsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContactUsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContactUsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactUsApi.apiContactUsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContactUsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactUsGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContactUsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactUsApi.apiContactUsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ContactUsCreate} [contactUsCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContactUsIdPut(id: number, contactUsCreate?: ContactUsCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContactUsIdPut(id, contactUsCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactUsApi.apiContactUsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ContactUsCreate} [contactUsCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiContactUsPost(contactUsCreate?: ContactUsCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactUs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiContactUsPost(contactUsCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactUsApi.apiContactUsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactUsApi - factory interface
 * @export
 */
export const ContactUsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactUsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ContactUsGet>> {
            return localVarFp.apiContactUsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContactUsApiApiContactUsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsIdDelete(requestParameters: ContactUsApiApiContactUsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiContactUsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContactUsApiApiContactUsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsIdGet(requestParameters: ContactUsApiApiContactUsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactUsGet> {
            return localVarFp.apiContactUsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContactUsApiApiContactUsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsIdPut(requestParameters: ContactUsApiApiContactUsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiContactUsIdPut(requestParameters.id, requestParameters.contactUsCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContactUsApiApiContactUsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactUsPost(requestParameters: ContactUsApiApiContactUsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ContactUs> {
            return localVarFp.apiContactUsPost(requestParameters.contactUsCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiContactUsIdDelete operation in ContactUsApi.
 * @export
 * @interface ContactUsApiApiContactUsIdDeleteRequest
 */
export interface ContactUsApiApiContactUsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ContactUsApiApiContactUsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiContactUsIdGet operation in ContactUsApi.
 * @export
 * @interface ContactUsApiApiContactUsIdGetRequest
 */
export interface ContactUsApiApiContactUsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ContactUsApiApiContactUsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiContactUsIdPut operation in ContactUsApi.
 * @export
 * @interface ContactUsApiApiContactUsIdPutRequest
 */
export interface ContactUsApiApiContactUsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ContactUsApiApiContactUsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {ContactUsCreate}
     * @memberof ContactUsApiApiContactUsIdPut
     */
    readonly contactUsCreate?: ContactUsCreate
}

/**
 * Request parameters for apiContactUsPost operation in ContactUsApi.
 * @export
 * @interface ContactUsApiApiContactUsPostRequest
 */
export interface ContactUsApiApiContactUsPostRequest {
    /**
     * 
     * @type {ContactUsCreate}
     * @memberof ContactUsApiApiContactUsPost
     */
    readonly contactUsCreate?: ContactUsCreate
}

/**
 * ContactUsApi - object-oriented interface
 * @export
 * @class ContactUsApi
 * @extends {BaseAPI}
 */
export class ContactUsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactUsApi
     */
    public apiContactUsGet(options?: RawAxiosRequestConfig) {
        return ContactUsApiFp(this.configuration).apiContactUsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContactUsApiApiContactUsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactUsApi
     */
    public apiContactUsIdDelete(requestParameters: ContactUsApiApiContactUsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ContactUsApiFp(this.configuration).apiContactUsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContactUsApiApiContactUsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactUsApi
     */
    public apiContactUsIdGet(requestParameters: ContactUsApiApiContactUsIdGetRequest, options?: RawAxiosRequestConfig) {
        return ContactUsApiFp(this.configuration).apiContactUsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContactUsApiApiContactUsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactUsApi
     */
    public apiContactUsIdPut(requestParameters: ContactUsApiApiContactUsIdPutRequest, options?: RawAxiosRequestConfig) {
        return ContactUsApiFp(this.configuration).apiContactUsIdPut(requestParameters.id, requestParameters.contactUsCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContactUsApiApiContactUsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactUsApi
     */
    public apiContactUsPost(requestParameters: ContactUsApiApiContactUsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return ContactUsApiFp(this.configuration).apiContactUsPost(requestParameters.contactUsCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HomeApi - axios parameter creator
 * @export
 */
export const HomeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeBannersGet: async (count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/home/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeProductsGet: async (count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/home/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeApi - functional programming interface
 * @export
 */
export const HomeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHomeBannersGet(count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Banner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHomeBannersGet(count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.apiHomeBannersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHomeProductsGet(count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHomeProductsGet(count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeApi.apiHomeProductsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomeApi - factory interface
 * @export
 */
export const HomeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeApiFp(configuration)
    return {
        /**
         * 
         * @param {HomeApiApiHomeBannersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeBannersGet(requestParameters: HomeApiApiHomeBannersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Banner>> {
            return localVarFp.apiHomeBannersGet(requestParameters.count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomeApiApiHomeProductsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHomeProductsGet(requestParameters: HomeApiApiHomeProductsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Product>> {
            return localVarFp.apiHomeProductsGet(requestParameters.count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiHomeBannersGet operation in HomeApi.
 * @export
 * @interface HomeApiApiHomeBannersGetRequest
 */
export interface HomeApiApiHomeBannersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof HomeApiApiHomeBannersGet
     */
    readonly count?: number
}

/**
 * Request parameters for apiHomeProductsGet operation in HomeApi.
 * @export
 * @interface HomeApiApiHomeProductsGetRequest
 */
export interface HomeApiApiHomeProductsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof HomeApiApiHomeProductsGet
     */
    readonly count?: number
}

/**
 * HomeApi - object-oriented interface
 * @export
 * @class HomeApi
 * @extends {BaseAPI}
 */
export class HomeApi extends BaseAPI {
    /**
     * 
     * @param {HomeApiApiHomeBannersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public apiHomeBannersGet(requestParameters: HomeApiApiHomeBannersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).apiHomeBannersGet(requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomeApiApiHomeProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    public apiHomeProductsGet(requestParameters: HomeApiApiHomeProductsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return HomeApiFp(this.configuration).apiHomeProductsGet(requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SocialMediaLinkApi - axios parameter creator
 * @export
 */
export const SocialMediaLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialmediaLinksGet: async (count?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/socialmedia/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialMediaLinkApi - functional programming interface
 * @export
 */
export const SocialMediaLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SocialMediaLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [count] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSocialmediaLinksGet(count?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SocialMediaLink>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSocialmediaLinksGet(count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SocialMediaLinkApi.apiSocialmediaLinksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SocialMediaLinkApi - factory interface
 * @export
 */
export const SocialMediaLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SocialMediaLinkApiFp(configuration)
    return {
        /**
         * 
         * @param {SocialMediaLinkApiApiSocialmediaLinksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialmediaLinksGet(requestParameters: SocialMediaLinkApiApiSocialmediaLinksGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<SocialMediaLink>> {
            return localVarFp.apiSocialmediaLinksGet(requestParameters.count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSocialmediaLinksGet operation in SocialMediaLinkApi.
 * @export
 * @interface SocialMediaLinkApiApiSocialmediaLinksGetRequest
 */
export interface SocialMediaLinkApiApiSocialmediaLinksGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SocialMediaLinkApiApiSocialmediaLinksGet
     */
    readonly count?: number
}

/**
 * SocialMediaLinkApi - object-oriented interface
 * @export
 * @class SocialMediaLinkApi
 * @extends {BaseAPI}
 */
export class SocialMediaLinkApi extends BaseAPI {
    /**
     * 
     * @param {SocialMediaLinkApiApiSocialmediaLinksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialMediaLinkApi
     */
    public apiSocialmediaLinksGet(requestParameters: SocialMediaLinkApiApiSocialmediaLinksGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SocialMediaLinkApiFp(this.configuration).apiSocialmediaLinksGet(requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubjectsApi - axios parameter creator
 * @export
 */
export const SubjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [subjectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsCreatePost: async (subjectName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subjects/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subjectName !== undefined) {
                localVarQueryParameter['subjectName'] = subjectName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsDeleteIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectsDeleteIdDelete', 'id', id)
            const localVarPath = `/api/subjects/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subjects/getAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsGetItemIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectsGetItemIdGet', 'id', id)
            const localVarPath = `/api/subjects/getItem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Subject} [subject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsPutIdPut: async (id: number, subject?: Subject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectsPutIdPut', 'id', id)
            const localVarPath = `/api/subjects/put/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectsApi - functional programming interface
 * @export
 */
export const SubjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [subjectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectsCreatePost(subjectName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectsCreatePost(subjectName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.apiSubjectsCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectsDeleteIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectsDeleteIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.apiSubjectsDeleteIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectsGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectsGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.apiSubjectsGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectsGetItemIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectsGetItemIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.apiSubjectsGetItemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Subject} [subject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectsPutIdPut(id: number, subject?: Subject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectsPutIdPut(id, subject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.apiSubjectsPutIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubjectsApi - factory interface
 * @export
 */
export const SubjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectsApiFp(configuration)
    return {
        /**
         * 
         * @param {SubjectsApiApiSubjectsCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsCreatePost(requestParameters: SubjectsApiApiSubjectsCreatePostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSubjectsCreatePost(requestParameters.subjectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubjectsApiApiSubjectsDeleteIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsDeleteIdDelete(requestParameters: SubjectsApiApiSubjectsDeleteIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSubjectsDeleteIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Subject>> {
            return localVarFp.apiSubjectsGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubjectsApiApiSubjectsGetItemIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsGetItemIdGet(requestParameters: SubjectsApiApiSubjectsGetItemIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Subject> {
            return localVarFp.apiSubjectsGetItemIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubjectsApiApiSubjectsPutIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectsPutIdPut(requestParameters: SubjectsApiApiSubjectsPutIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSubjectsPutIdPut(requestParameters.id, requestParameters.subject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSubjectsCreatePost operation in SubjectsApi.
 * @export
 * @interface SubjectsApiApiSubjectsCreatePostRequest
 */
export interface SubjectsApiApiSubjectsCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof SubjectsApiApiSubjectsCreatePost
     */
    readonly subjectName?: string
}

/**
 * Request parameters for apiSubjectsDeleteIdDelete operation in SubjectsApi.
 * @export
 * @interface SubjectsApiApiSubjectsDeleteIdDeleteRequest
 */
export interface SubjectsApiApiSubjectsDeleteIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof SubjectsApiApiSubjectsDeleteIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiSubjectsGetItemIdGet operation in SubjectsApi.
 * @export
 * @interface SubjectsApiApiSubjectsGetItemIdGetRequest
 */
export interface SubjectsApiApiSubjectsGetItemIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SubjectsApiApiSubjectsGetItemIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiSubjectsPutIdPut operation in SubjectsApi.
 * @export
 * @interface SubjectsApiApiSubjectsPutIdPutRequest
 */
export interface SubjectsApiApiSubjectsPutIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof SubjectsApiApiSubjectsPutIdPut
     */
    readonly id: number

    /**
     * 
     * @type {Subject}
     * @memberof SubjectsApiApiSubjectsPutIdPut
     */
    readonly subject?: Subject
}

/**
 * SubjectsApi - object-oriented interface
 * @export
 * @class SubjectsApi
 * @extends {BaseAPI}
 */
export class SubjectsApi extends BaseAPI {
    /**
     * 
     * @param {SubjectsApiApiSubjectsCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public apiSubjectsCreatePost(requestParameters: SubjectsApiApiSubjectsCreatePostRequest = {}, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).apiSubjectsCreatePost(requestParameters.subjectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubjectsApiApiSubjectsDeleteIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public apiSubjectsDeleteIdDelete(requestParameters: SubjectsApiApiSubjectsDeleteIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).apiSubjectsDeleteIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public apiSubjectsGetAllGet(options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).apiSubjectsGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubjectsApiApiSubjectsGetItemIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public apiSubjectsGetItemIdGet(requestParameters: SubjectsApiApiSubjectsGetItemIdGetRequest, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).apiSubjectsGetItemIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubjectsApiApiSubjectsPutIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public apiSubjectsPutIdPut(requestParameters: SubjectsApiApiSubjectsPutIdPutRequest, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).apiSubjectsPutIdPut(requestParameters.id, requestParameters.subject, options).then((request) => request(this.axios, this.basePath));
    }
}



